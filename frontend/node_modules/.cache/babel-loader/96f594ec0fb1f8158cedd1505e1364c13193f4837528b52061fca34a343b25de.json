{"ast":null,"code":"var _jsxFileName = \"/Users/janith/devlopment/react/React-router-test-2/frontend/src/pages/NewEvent.js\";\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewEvent() {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 12\n  }, this);\n}\n_c = NewEvent;\nexport default NewEvent;\nexport async function action({\n  request,\n  params\n}) {\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (response.ok) {\n    throw json({\n      message: 'Could not create event.'\n    }, {\n      status: 500\n    });\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewEvent\");","map":{"version":3,"names":["EventForm","jsxDEV","_jsxDEV","NewEvent","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","ok","json","message","status","$RefreshReg$"],"sources":["/Users/janith/devlopment/react/React-router-test-2/frontend/src/pages/NewEvent.js"],"sourcesContent":["import EventForm from \"../components/EventForm\";\n\nfunction NewEvent(){\n\n   \n    return <EventForm/>;\n\n}\n\nexport default NewEvent;\n\nexport async function action({request,params}){\n    const data = await request.formData();\n    const eventData = {\n        title: data.get('title'),\n        image: data.get('image'),\n        date: data.get('date'),\n        description: data.get('description'),\n    }\n\n    const response = await fetch('http://localhost:8080/events',{\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(eventData),\n    });\n    if(response.ok){\n        throw json({message: 'Could not create event.'}, {status: 500});\n    \n    }\n}"],"mappings":";AAAA,OAAOA,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,QAAQA,CAAA,EAAE;EAGf,oBAAOD,OAAA,CAACF,SAAS;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;AAEvB;AAACC,EAAA,GALQL,QAAQ;AAOjB,eAAeA,QAAQ;AAEvB,OAAO,eAAeM,MAAMA,CAAC;EAACC,OAAO;EAACC;AAAM,CAAC,EAAC;EAC1C,MAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,CAAC,CAAC;EACrC,MAAMC,SAAS,GAAG;IACdC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACvC,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAC;IACxDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAClC,CAAC,CAAC;EACF,IAAGM,QAAQ,CAACO,EAAE,EAAC;IACX,MAAMC,IAAI,CAAC;MAACC,OAAO,EAAE;IAAyB,CAAC,EAAE;MAACC,MAAM,EAAE;IAAG,CAAC,CAAC;EAEnE;AACJ;AAAC,IAAAtB,EAAA;AAAAuB,YAAA,CAAAvB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}